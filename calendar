{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPZBNOHrdQz0dULX6/i/6l2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/juanmanu12-dot/CalendarAppChallenge/blob/master/calendar\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_YbIDGcWpkx8"
      },
      "outputs": [],
      "source": [
        "from dataclasses import dataclass, field\n",
        "from datetime import date, time, datetime, timedelta\n",
        "from typing import Optional\n",
        "\n",
        "from app.services.util import (\n",
        "    generate_unique_id,\n",
        "    reminder_not_found_error,\n",
        "    slot_not_available_error,\n",
        "    event_not_found_error,\n",
        "    date_lower_than_today_error,\n",
        ")\n",
        "\n",
        "@dataclass\n",
        "class Reminder:\n",
        "    EMAIL: str = \"email\"\n",
        "    SYSTEM: str = \"system\"\n",
        "\n",
        "    date_time: datetime\n",
        "    type: str = EMAIL\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Reminder on {self.date_time} of type {self.type}\"\n",
        "\n",
        "\n",
        "@dataclass\n",
        "class Event:\n",
        "    title: str\n",
        "    description: str\n",
        "    date_: date\n",
        "    start_at: time\n",
        "    end_at: time\n",
        "    id: str = field(default_factory=generate_unique_id)\n",
        "    reminders: list[Reminder] = field(default_factory=list)\n",
        "\n",
        "    def add_reminder(self, date_time: datetime, type_: str = Reminder.EMAIL):\n",
        "        reminder = Reminder(date_time=date_time, type=type_)\n",
        "        self.reminders.append(reminder)\n",
        "\n",
        "    def delete_reminder(self, reminder_index: int):\n",
        "        if 0 <= reminder_index < len(self.reminders):\n",
        "            del self.reminders[reminder_index]\n",
        "        else:\n",
        "            reminder_not_found_error()\n",
        "\n",
        "    def __str__(self):\n",
        "        return (f\"ID: {self.id}\\n\"\n",
        "                f\"Event title: {self.title}\\n\"\n",
        "                f\"Description: {self.description}\\n\"\n",
        "                f\"Time: {self.start_at} - {self.end_at}\")\n",
        "\n",
        "\n",
        "class Day:\n",
        "    def __init__(self, date_: date):\n",
        "        self.date_ = date_\n",
        "        self.slots: dict[time, Optional[str]] = {}\n",
        "        self._init_slots()\n",
        "\n",
        "    def _init_slots(self):\n",
        "        current = time(0, 0)\n",
        "        while current < time(23, 59):\n",
        "            self.slots[current] = None\n",
        "            dt = (datetime.combine(date.today(), current) + timedelta(minutes=15)).time()\n",
        "            current = dt\n",
        "\n",
        "    def add_event(self, event_id: str, start_at: time, end_at: time):\n",
        "        current = start_at\n",
        "        while current < end_at:\n",
        "            if self.slots.get(current):\n",
        "                slot_not_available_error()\n",
        "            current = (datetime.combine(date.today(), current) + timedelta(minutes=15)).time()\n",
        "\n",
        "        current = start_at\n",
        "        while current < end_at:\n",
        "            self.slots[current] = event_id\n",
        "            current = (datetime.combine(date.today(), current) + timedelta(minutes=15)).time()\n",
        "\n",
        "    def delete_event(self, event_id: str):\n",
        "        deleted = False\n",
        "        for slot, saved_id in self.slots.items():\n",
        "            if saved_id == event_id:\n",
        "                self.slots[slot] = None\n",
        "                deleted = True\n",
        "        if not deleted:\n",
        "            event_not_found_error()\n",
        "\n",
        "    def update_event(self, event_id: str, start_at: time, end_at: time):\n",
        "        for slot in self.slots:\n",
        "            if self.slots[slot] == event_id:\n",
        "                self.slots[slot] = None\n",
        "\n",
        "        for slot in self.slots:\n",
        "            if start_at <= slot < end_at:\n",
        "                if self.slots[slot]:\n",
        "                    slot_not_available_error()\n",
        "                else:\n",
        "                    self.slots[slot] = event_id\n",
        "\n",
        "\n",
        "class Calendar:\n",
        "    def __init__(self):\n",
        "        self.days: dict[date, Day] = {}\n",
        "        self.events: dict[str, Event] = {}\n",
        "\n",
        "    def add_event(self, title: str, description: str, date_: date, start_at: time, end_at: time) -> str:\n",
        "        if date_ < datetime.now().date():\n",
        "            date_lower_than_today_error()\n",
        "\n",
        "        if date_ not in self.days:\n",
        "            self.days[date_] = Day(date_)\n",
        "\n",
        "        event = Event(title=title, description=description, date_=date_, start_at=start_at, end_at=end_at)\n",
        "        self.days[date_].add_event(event.id, start_at, end_at)\n",
        "        self.events[event.id] = event\n",
        "        return event.id\n",
        "\n",
        "    def add_reminder(self, event_id: str, date_time: datetime, type_: str):\n",
        "        event = self.events.get(event_id)\n",
        "        if not event:\n",
        "            event_not_found_error()\n",
        "        event.add_reminder(date_time, type_)\n",
        "\n",
        "    def find_available_slots(self, date_: date) -> list[time]:\n",
        "        if date_ not in self.days:\n",
        "            return [time(h, m) for h in range(24) for m in range(0, 60, 15)]\n",
        "        return [slot for slot, event_id in self.days[date_].slots.items() if event_id is None]\n",
        "\n",
        "    def update_event(self, event_id: str, title: str, description: str, date_: date, start_at: time, end_at: time):\n",
        "        event = self.events[event_id]\n",
        "        if not event:\n",
        "            event_not_found_error()\n",
        "\n",
        "        is_new_date = False\n",
        "\n",
        "        if event.date_ != date_:\n",
        "            self.delete_event(event_id)\n",
        "            event = Event(title=title, description=description, date_=date_, start_at=start_at, end_at=end_at)\n",
        "            event.id = event_id\n",
        "            self.events[event_id] = event\n",
        "            is_new_date = True\n",
        "            if date_ not in self.days:\n",
        "                self.days[date_] = Day(date_)\n",
        "            day = self.days[date_]\n",
        "            day.add_event(event_id, start_at, end_at)\n",
        "        else:\n",
        "            event.title = title\n",
        "            event.description = description\n",
        "            event.date_ = date_\n",
        "            event.start_at = start_at\n",
        "            event.end_at = end_at\n",
        "\n",
        "        for day in self.days.values():\n",
        "            if not is_new_date and event_id in day.slots.values():\n",
        "                day.delete_event(event.id)\n",
        "                day.update_event(event.id, start_at, end_at)\n",
        "\n",
        "    def delete_event(self, event_id: str):\n",
        "        if event_id not in self.events:\n",
        "            event_not_found_error()\n",
        "\n",
        "        self.events.pop(event_id)\n",
        "\n",
        "        for day in self.days.values():\n",
        "            if event_id in day.slots.values():\n",
        "                day.delete_event(event_id)\n",
        "                break\n",
        "\n",
        "    def find_events(self, start_at: date, end_at: date) -> dict[date, list[Event]]:\n",
        "        events: dict[date, list[Event]] = {}\n",
        "        for event in self.events.values():\n",
        "            if start_at <= event.date_ <= end_at:\n",
        "                if event.date_ not in events:\n",
        "                    events[event.date_] = []\n",
        "                events[event.date_].append(event)\n",
        "        return events\n",
        "\n",
        "    def delete_reminder(self, event_id: str, reminder_index: int):\n",
        "        event = self.events.get(event_id)\n",
        "        if not event:\n",
        "            event_not_found_error()\n",
        "\n",
        "        event.delete_reminder(reminder_index)\n",
        "\n",
        "    def list_reminders(self, event_id: str) -> list[Reminder]:\n",
        "        event = self.events.get(event_id)\n",
        "        if not event:\n",
        "            event_not_found_error()\n",
        "\n",
        "        return event.reminders\n"
      ]
    }
  ]
}